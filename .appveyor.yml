environment:
  matrix:
    - PLATFORM: x86
      PHP_VERSION: '7.1.15'
      VC_VERSION: '14'
      PREFER_LOWEST: 

matrix:
  fast_finish: true

init:
  - set PATH=C:\tools;C:\tools\php-%PHP_VERSION%;C:\Program Files\MySQL\MySQL Server 5.7\bin;C:\tools\gettext\bin;%PATH%
  - set MYSQL_PWD=Password12!

clone_depth: 50

cache:
  - C:\tools\downloads -> .appveyor.yml
  - '%LOCALAPPDATA%\Composer\files'

services:
  - mysql

install:
  - ps: |
      $ProgressPreference = "SilentlyContinue"
      $ErrorActionPreference = "Stop"
      [Net.ServicePointManager]::SecurityProtocol = "tls12, tls11, tls"
      If(-Not(Test-Path -Path "C:\tools")) {
          Write-Host "Creating tools directory"
          New-Item -ItemType Directory -Path "C:\tools" | Out-Null
      }
      If(-Not(Test-Path -Path "C:\tools\downloads")) {
          Write-Host "Creating download directory"
          New-Item -ItemType Directory -Path "C:\tools\downloads" | Out-Null
      }
      Set-Location -Path C:\tools\downloads
      $PHP_ZIP = "php-" + $env:PHP_VERSION + "-Win32-VC" + $env:VC_VERSION + "-" + $env:PLATFORM + ".zip"
      If(-Not(Test-Path $PHP_ZIP)) {
          Try {
              Write-Host "Downloading PHP (release)"
              Invoke-WebRequest $("http://windows.php.net/downloads/releases/" + $PHP_ZIP) -OutFile $PHP_ZIP
          } Catch {
              Try {
                  Write-Host "Downloading PHP (archived)"
                  Invoke-WebRequest $("http://windows.php.net/downloads/releases/archives/" + $PHP_ZIP) -OutFile $PHP_ZIP
              } Catch {
                  Write-Host "Downloading PHP (QA)"
                  Invoke-WebRequest $("http://windows.php.net/downloads/releases/qa/" + $PHP_ZIP) -OutFile $PHP_ZIP
              }
          }
      }
      $GETTEXT_ZIP = "gettext0.19.8.1-iconv1.15-shared-32.zip"
      If(-Not(Test-Path $GETTEXT_ZIP)) {
          Write-Host "Downloading gettext"
          Invoke-WebRequest $("https://github.com/mlocati/gettext-iconv-windows/releases/download/v0.19.8.1-v1.15/" + $GETTEXT_ZIP) -OutFile $GETTEXT_ZIP
      }
      If(-Not(Test-Path "composer.phar")) {
          Write-Host "Downloading composer"
          Invoke-WebRequest "https://getcomposer.org/download/1.6.3/composer.phar" -OutFile "composer.phar"
      }
      Set-Location -Path "C:\tools"
      If(-Not(Test-Path -Path $("php-" + $env:PHP_VERSION))) {
          Write-Host "Creating PHP directory"
          New-Item -ItemType Directory -Path $("php-" + $env:PHP_VERSION) | Out-Null
      }
      Set-Location -Path $("php-" + $env:PHP_VERSION)
      If(-Not(Test-Path -Path "php.exe")) {
          Write-Host "Extracting PHP"
          (7z.exe x -bd -y -- $("..\downloads\" + $PHP_ZIP)) | Out-Null
          If(-Not($?)) {
              throw "7z failed!"
          }
      }
      If(-Not(Test-Path -Path "php-installed.txt")) {
          Write-Host "Creating php.ini"
          Copy-Item -Path "php.ini-development" -Destination "php.ini"
          Add-Content -Path "php.ini" -Value "date.timezone=""UTC"""
          Add-Content -Path "php.ini" -Value "extension_dir=ext"
          Add-Content -Path "php.ini" -Value "extension=php_mbstring.dll"
          Add-Content -Path "php.ini" -Value "extension=php_bz2.dll"
          Add-Content -Path "php.ini" -Value "extension=php_mysqli.dll"
          Add-Content -Path "php.ini" -Value "extension=php_curl.dll"
          Add-Content -Path "php.ini" -Value "extension=php_gd2.dll"
          Add-Content -Path "php.ini" -Value "extension=php_intl.dll"
          Add-Content -Path "php.ini" -Value "extension=php_pdo_mysql.dll"
          Add-Content -Path "php.ini" -Value "extension=php_xsl.dll"
          Add-Content -Path "php.ini" -Value "extension=php_fileinfo.dll"
          Add-Content -Path "php.ini" -Value "extension=php_openssl"
          Add-Content -Path "php.ini" -Value "zend.assertions=1"
          Add-Content -Path "php.ini" -Value "assert.exception=On"
          New-Item -ItemType File "php-installed.txt" | Out-Null
      }
      Set-Location -Path "C:\tools"
      If(-Not(Test-Path -Path "composer.bat")) {
          Write-Host "Creating composer.bat"
          Add-Content -Path "composer.bat" -Value "@php C:\tools\downloads\composer.phar %*"
      }
      If(-Not(Test-Path -Path "gettext")) {
          Write-Host "Creating gettext directory"
          New-Item -ItemType Directory -Path "gettext" | Out-Null
      }
      Set-Location -Path "C:\tools\gettext"
      If(-Not(Test-Path -Path "bin\msgen.exe ")) {
          Write-Host "Extracting gettext"
          (7z.exe x -bd -y -- $("..\downloads\" + $GETTEXT_ZIP)) | Out-Null
          If(-Not($?)) {
              throw "7z failed!"
          }
      }
      Set-Location -Path $env:APPVEYOR_BUILD_FOLDER
  - cd /D "%APPVEYOR_BUILD_FOLDER%"
  - composer install --no-progress --no-suggest --optimize-autoloader --no-ansi --no-interaction %PREFER_LOWEST%

build: off

test_script:
  - mysql --user=root -e "CREATE USER 'travis'@'localhost' IDENTIFIED BY '';" || exit 0
  - mysql --user=root -e "GRANT ALL PRIVILEGES ON *.* TO 'travis'@'localhost' WITH GRANT OPTION; FLUSH PRIVILEGES;"
  - cd /d "%APPVEYOR_BUILD_FOLDER%"
  - set APPVEYOR_SAVE_CACHE_ON_ERROR=true
  - composer test

deploy: off
